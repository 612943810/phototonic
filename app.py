"""
This module defines a FastAPI application that interacts with the Google Gemini API.

It allows users to send prompts to the Gemini-Flash model and receive
text-based responses. The API key for Google Gemini is loaded from an environment
variable.
"""

import google.generativeai as genai
from dotenv import load_dotenv
import os
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List

# Load environment variables
load_dotenv()
API_KEY = os.getenv("API_KEY")

# Configure the API key globally
if API_KEY:
    genai.configure(api_key=API_KEY)
else:
    print("Warning: API_KEY environment variable not set. Gemini features will be disabled.")

# Initialize the Gemini Flash model
gemini_model = None

if API_KEY:
    gemini_model = genai.GenerativeModel(model_name="gemini-2.0-flash")

app = FastAPI()

class GeminiRequest(BaseModel):
    """
    Pydantic model for validating incoming request bodies.

    Attributes:
        prompt (str): The text prompt to send to the Gemini model.
    """
    prompt: str

class GeminiResponse(BaseModel):
    """
    Pydantic model for structuring the response from the API.

    Attributes:
        results (List[str]): A list containing the text generated by the Gemini model.
    """
    results: List[str]

@app.get("/")
async def root():
    """
    Root endpoint.

    Returns:
        dict: A simple welcome message.
    """
    return {"message": "Welcome to the Gemini-powered FastAPI app!"}

@app.post("/generate", response_model=GeminiResponse)
async def generate_text(request_data: GeminiRequest):
    """
    Endpoint to generate text using the Gemini Flash API.

    Args:
        request_data (GeminiRequest): An object containing the prompt for text generation.

    Returns:
        GeminiResponse: An object containing the generated text.

    Raises:
        HTTPException:
          - 503 Service Unavailable if the Gemini Flash API is not available due to
            the API key not being set.
          - 500 Internal Server Error if any other error occurs during
            text generation.
    """
    if gemini_model is None:
        raise HTTPException(
            status_code=503, detail="Gemini API not available. API_KEY not set."
        )

    try:
        response = gemini_model.generate_content(request_data.prompt)
        if response.candidates:
            return GeminiResponse(
                results=[part.text for part in response.candidates[0].content.parts]
            )
        else:
            return GeminiResponse(results=["No content generated by the model."])
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error generating text: {str(e)}")


